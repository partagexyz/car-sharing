import axios from 'axios';
export class JsonRpcClient {
    path;
    axiosInstance;
    constructor(baseUrl, path, defaultTimeout = 1000) {
        this.path = path;
        this.axiosInstance = axios.create({
            baseURL: baseUrl,
            timeout: defaultTimeout,
        });
    }
    async query(params, config) {
        return await this.request('query', params, config);
    }
    async mutate(params, config) {
        return await this.request('mutate', params, config);
    }
    async request(method, params, config) {
        const requestId = this.getRandomRequestId();
        const data = {
            jsonrpc: '2.0',
            id: requestId,
            method,
            params,
        };
        try {
            const response = await this.axiosInstance.post(this.path, data, config);
            if (response?.status === 200) {
                if (response?.data?.id !== requestId) {
                    return {
                        error: {
                            code: 400,
                            id: response?.data?.id,
                            jsonrpc: response?.data?.jsonrpc,
                            error: {
                                name: 'MissmatchedRequestIdError',
                                cause: {
                                    name: 'MissmatchedRequestIdError',
                                    info: {
                                        message: `Missmatched RequestId expected ${requestId}, got ${response?.data?.id}`,
                                    },
                                },
                            },
                        },
                    };
                }
                if (response?.data?.error) {
                    return {
                        error: {
                            code: 400,
                            id: response?.data?.id,
                            jsonrpc: response?.data?.jsonrpc,
                            error: {
                                name: response?.data?.error?.type,
                                cause: {
                                    name: response?.data?.error?.data?.type ??
                                        response?.data?.error?.type,
                                    info: {
                                        message: response?.data?.error?.data?.data?.type,
                                    },
                                },
                            },
                        },
                    };
                }
                return {
                    result: response?.data?.result,
                };
            }
            else {
                return {
                    error: {
                        id: response?.data?.id,
                        jsonrpc: response?.data?.jsonrpc,
                        code: response?.status ?? null,
                        error: {
                            name: 'InvalidRequestError',
                            cause: {
                                name: 'InvalidRequestError',
                                info: {
                                    message: response?.data?.error?.data?.data?.type,
                                },
                            },
                        },
                    },
                };
            }
        }
        catch (error) {
            return {
                error: {
                    id: requestId,
                    jsonrpc: '2.0',
                    code: error.response.code,
                    error: {
                        name: 'UnknownServerError',
                        cause: {
                            name: 'UnknownServerError',
                            info: {
                                message: error?.response?.data,
                            },
                        },
                    },
                },
            };
        }
    }
    getRandomRequestId() {
        return Math.floor(Math.random() * Math.pow(2, 32));
    }
}

import { Axios } from 'axios';
import { ResponseData } from '../types/api-response';
export interface Header {
    [key: string]: string;
}
export interface HttpClient {
    get<T>(url: string, headers?: Header): Promise<ResponseData<T>>;
    post<T>(url: string, body?: unknown, headers?: Header): Promise<ResponseData<T>>;
    put<T>(url: string, body?: unknown, headers?: Header[]): Promise<ResponseData<T>>;
    delete<T>(url: string, body?: unknown, headers?: Header[]): Promise<ResponseData<T>>;
    patch<T>(url: string, body?: unknown, headers?: Header[]): Promise<ResponseData<T>>;
    head(url: string, headers?: Header[]): Promise<ResponseData<void>>;
}
export declare class AxiosHttpClient implements HttpClient {
    private axios;
    constructor(axios: Axios);
    get<T>(url: string, headers?: Header): Promise<ResponseData<T>>;
    post<T>(url: string, body?: unknown, headers?: Header): Promise<ResponseData<T>>;
    put<T>(url: string, body?: unknown, headers?: Header[]): Promise<ResponseData<T>>;
    delete<T>(url: string, headers?: Header[]): Promise<ResponseData<T>>;
    patch<T>(url: string, body?: unknown, headers?: Header[]): Promise<ResponseData<T>>;
    head(url: string, headers?: Header[]): Promise<ResponseData<void>>;
    private request;
}
//# sourceMappingURL=httpClient.d.ts.map
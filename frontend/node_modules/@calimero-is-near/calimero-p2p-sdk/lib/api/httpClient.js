import { AxiosError } from 'axios';
export class AxiosHttpClient {
    axios;
    constructor(axios) {
        this.axios = axios;
    }
    async get(url, headers) {
        return this.request(this.axios.get(url, { headers }));
    }
    async post(url, body, headers = {}) {
        return this.request(this.axios.post(url, body, { headers }));
    }
    async put(url, body, headers) {
        return this.request(this.axios.put(url, body, {
            headers: headers?.reduce((acc, curr) => ({ ...acc, ...curr }), {}),
        }));
    }
    async delete(url, headers) {
        return this.request(this.axios.delete(url, {
            headers: headers?.reduce((acc, curr) => ({ ...acc, ...curr }), {}),
        }));
    }
    async patch(url, body, headers) {
        return this.request(this.axios.patch(url, body, {
            headers: headers?.reduce((acc, curr) => ({ ...acc, ...curr }), {}),
        }));
    }
    async head(url, headers) {
        return this.request(this.axios.head(url, {
            headers: headers?.reduce((acc, curr) => ({ ...acc, ...curr }), {}),
        }));
    }
    async request(promise) {
        try {
            const response = await promise;
            //head does not return body so we are adding data manually
            if (response?.config?.method?.toUpperCase() === 'HEAD') {
                return {
                    data: null,
                };
            }
            else {
                return response.data;
            }
        }
        catch (e) {
            if (e instanceof AxiosError) {
                //head does not return body so we are adding error manually
                if (e?.config?.method?.toUpperCase() === 'HEAD') {
                    return {
                        error: {
                            code: e.request.status,
                            message: e.message,
                        },
                    };
                }
                const error = e.response?.data.error;
                //TODO make code mandatory
                if (!error || !error.message) {
                    return {
                        error: GENERIC_ERROR,
                    };
                }
                return {
                    error: {
                        code: error.code,
                        message: error.message,
                    },
                };
            }
            return {
                error: GENERIC_ERROR,
            };
        }
    }
}
const GENERIC_ERROR = {
    code: 500,
    message: 'Something went wrong',
};
